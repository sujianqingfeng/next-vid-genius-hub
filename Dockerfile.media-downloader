ARG BASE_NODE_IMAGE=node:22-slim
FROM ${BASE_NODE_IMAGE}

ARG MIHOMO_VERSION=1.18.10
# Use the "compatible" build by default to run on CPUs without x86-64-v3/AVX2.
# Can be overridden at build time with --build-arg MIHOMO_PLATFORM=linux-amd64 if desired.
ARG MIHOMO_PLATFORM=linux-amd64-compatible
ARG DEBIAN_MIRROR=https://mirrors.tuna.tsinghua.edu.cn/debian
ARG DEBIAN_SECURITY_MIRROR=https://mirrors.tuna.tsinghua.edu.cn/debian-security
ARG NPM_REGISTRY=https://registry.npmmirror.com

RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends ca-certificates; \
    release="$(awk -F= '/^VERSION_CODENAME=/{print $2}' /etc/os-release)"; \
    if [ "$release" = "bookworm" ] || [ "$release" = "trixie" ]; then \
      components="main contrib non-free non-free-firmware"; \
    else \
      components="main contrib non-free"; \
    fi; \
    printf 'deb %s %s %s\n' "${DEBIAN_MIRROR}" "${release}" "${components}" > /etc/apt/sources.list; \
    printf 'deb %s %s-updates %s\n' "${DEBIAN_MIRROR}" "${release}" "${components}" >> /etc/apt/sources.list; \
    printf 'deb %s %s-backports %s\n' "${DEBIAN_MIRROR}" "${release}" "${components}" >> /etc/apt/sources.list; \
    printf 'deb %s %s-security %s\n' "${DEBIAN_SECURITY_MIRROR}" "${release}" "${components}" >> /etc/apt/sources.list; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
      ffmpeg \
      python3 \
      python3-pip \
      curl \
      gzip \
      unzip; \
    rm -rf /var/lib/apt/lists/*; \
    update-ca-certificates

# Install latest yt-dlp binary (apt package may lag behind and break YouTube downloads)
RUN curl -fsSL https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp \
  && chmod +x /usr/local/bin/yt-dlp

RUN curl -fL -o /tmp/mihomo.gz "https://github.com/MetaCubeX/mihomo/releases/download/v${MIHOMO_VERSION}/mihomo-${MIHOMO_PLATFORM}-v${MIHOMO_VERSION}.gz" \
  && gunzip /tmp/mihomo.gz \
  && mv /tmp/mihomo /usr/local/bin/mihomo \
  && chmod +x /usr/local/bin/mihomo

WORKDIR /app
# Install with monorepo local package dependency
# Build context is repo root so these COPY paths are valid
COPY containers/media-downloader/package.json ./package.json
COPY packages/media-core ./packages/media-core
COPY packages/media-node ./packages/media-node
COPY packages/media-providers ./packages/media-providers
COPY packages/callback-utils ./packages/callback-utils
RUN npm config set registry ${NPM_REGISTRY}
RUN npm install --omit=dev
COPY containers/media-downloader/index.mjs ./index.mjs
COPY containers/shared.mjs ./shared.mjs

RUN mkdir -p /app/clash /app/clash/providers

EXPOSE 8080
CMD ["node", "index.mjs"]
