---
alwaysApply: true
description: Code Architecture Guidelines - Hard metrics and design principles to maintain code quality and avoid architectural smells
---

# Code Architecture Guidelines

## Hard Metrics (Mandatory)

### File Size Limits
- **JavaScript/TypeScript**: Maximum 500 lines per file
- **Java/Go/Rust**: Maximum 500 lines per file
- **Folder Structure**: Maximum 8 files per folder level - if exceeded, create subfolders

## Architectural Design Principles

### Code Smells to Avoid

#### 1. Rigidity (僵化)
- **Problem**: System is difficult to change, small modifications cause cascading changes
- **Solution**: Design for flexibility, use dependency injection, avoid tight coupling

#### 2. Redundancy (冗余)
- **Problem**: Same code logic appears in multiple places, causing maintenance issues
- **Solution**: Extract common logic into shared utilities, use composition over duplication

#### 3. Circular Dependency (循环依赖)
- **Problem**: Modules are entangled, creating "dead knots" that are hard to test and reuse
- **Solution**: Design clear dependency hierarchy, use interfaces, implement dependency inversion

#### 4. Fragility (脆弱性)
- **Problem**: Changes in one area unexpectedly break unrelated functionality
- **Solution**: Write comprehensive tests, use proper encapsulation, minimize side effects

#### 5. Obscurity (晦涩性)
- **Problem**: Code intent is unclear, structure is confusing, difficult to understand
- **Solution**: Use clear naming conventions, add meaningful comments, follow SOLID principles

#### 6. Data Clump (数据泥团)
- **Problem**: Multiple data items always appear together as parameters
- **Solution**: Create dedicated objects/classes to group related data

#### 7. Needless Complexity (不必要的复杂性)
- **Problem**: Over-engineering simple problems, making systems bloated and hard to understand
- **Solution**: Keep it simple, use the simplest solution that works, avoid premature optimization

## Implementation Guidelines

### When Writing Code
- Always check file size before committing
- Refactor when approaching 500-line limit
- Organize files into logical subfolders when exceeding 8 files per folder
- Continuously evaluate for code smells during development

### When Reviewing Code
- Identify and flag any code smells immediately
- Suggest refactoring opportunities when architectural issues are detected
- Ensure adherence to hard metrics
- Provide specific optimization recommendations

### Quality Assurance
- **CRITICAL**: Always ask users if they want optimization when code smells are detected
- Provide reasonable optimization suggestions with clear benefits
- Focus on maintainability, readability, and scalability
- Prioritize architectural improvements over minor optimizations
