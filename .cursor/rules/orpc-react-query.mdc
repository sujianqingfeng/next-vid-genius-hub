---
alwaysApply: false
description: oRPC与React Query集成使用指南 - 包含最佳实践、代码示例和项目约定
globs: **/*.{ts,tsx}
---

# oRPC + React Query 集成指南

## 快速开始

### 1. 安装依赖
```bash
pnpm add @orpc/tanstack-query@latest
```

### 2. 创建工具类
在 `lib/orpc/query-client.ts` 中创建工具函数：

```typescript
import { createTanstackQueryUtils } from '@orpc/tanstack-query'
import { orpc } from './client'

export const queryOrpc = createTanstackQueryUtils(orpc)
```

### 3. 避免键冲突
为不同功能模块创建独立的工具实例：

```typescript
// 用户相关
export const userORPC = createTanstackQueryUtils(userClient, {
  path: ['user']
})

// 媒体相关
export const mediaORPC = createTanstackQueryUtils(mediaClient, {
  path: ['media']
})
```

## 查询使用模式

### 基础查询
```typescript
import { useQuery } from '@tanstack/react-query'
import { queryOrpc } from '~/lib/orpc/query-client'

const { data, isLoading, error } = useQuery(
  queryOrpc.media.list.queryOptions({
    input: { limit: 10 },
    context: { cache: true }
  })
)
```

### 无限滚动查询
```typescript
import { useInfiniteQuery } from '@tanstack/react-query'

const {
  data,
  fetchNextPage,
  hasNextPage,
  isFetchingNextPage
} = useInfiniteQuery(
  queryOrpc.media.list.infiniteOptions({
    input: (pageParam: number | undefined) => ({ 
      limit: 20, 
      offset: pageParam 
    }),
    initialPageParam: undefined,
    getNextPageParam: (lastPage) => lastPage.nextPageParam,
  })
)
```

### 流式查询
```typescript
import { useQuery } from '@tanstack/react-query'

const { data } = useQuery(
  queryOrpc.media.process.streamedOptions({
    input: { id: 'video-123' },
    queryFnOptions: {
      refetchMode: 'reset',
      maxChunks: 3,
    },
    retry: true,
  })
)
```

### 实时查询
```typescript
const { data } = useQuery(
  queryOrpc.media.status.liveOptions({
    input: { id: 'video-123' },
    retry: true,
  })
)
```

## 变更操作

### 基础变更
```typescript
import { useMutation } from '@tanstack/react-query'

const mutation = useMutation(
  queryOrpc.media.create.mutationOptions({
    context: { cache: true },
    onSuccess: () => {
      // 成功后刷新列表
      queryClient.invalidateQueries({
        queryKey: queryOrpc.media.key()
      })
    }
  })
)

// 使用
mutation.mutate({
  title: '新视频',
  url: 'https://example.com/video.mp4'
})
```

## 查询键管理

### 基础键操作
```typescript
const queryClient = useQueryClient()

// 使所有媒体查询失效
queryClient.invalidateQueries({
  queryKey: queryOrpc.media.key()
})

// 使特定查询失效
queryClient.invalidateQueries({
  queryKey: queryOrpc.media.find.key({ input: { id: '123' } })
})

// 更新查询数据
queryClient.setQueryData(
  queryOrpc.media.find.queryKey({ input: { id: '123' } }),
  (old) => ({ ...old, title: '新标题' })
)
```

### 条件查询禁用
```typescript
import { skipToken } from '@tanstack/react-query'

const { data } = useQuery(
  queryOrpc.media.find.queryOptions({
    input: id ? { id } : skipToken,
  })
)
```

## 错误处理

### 类型安全错误处理
```typescript
import { isDefinedError } from '@orpc/client'

const mutation = useMutation(
  queryOrpc.media.download.mutationOptions({
    onError: (error) => {
      if (isDefinedError(error)) {
        // 处理类型安全的错误
        console.error('下载失败:', error.message)
      }
    }
  })
)
```

## SSR 和 Hydration

### 创建支持序列化的 QueryClient
在 `lib/query/client.ts` 中：

```typescript
import { QueryClient } from '@tanstack/react-query'
import { StandardRPCJsonSerializer } from '@orpc/client/standard'

const serializer = new StandardRPCJsonSerializer({
  customJsonSerializers: [
    // 自定义序列化器
  ]
})

export function createQueryClient() {
  return new QueryClient({
    defaultOptions: {
      queries: {
        staleTime: 60 * 1000, // 防止挂载时重新获取
      },
      dehydrate: {
        serializeData(data) {
          const [json, meta] = serializer.serialize(data)
          return { json, meta }
        },
      },
      hydrate: {
        deserializeData(data) {
          return serializer.deserialize(data.json, data.meta)
        }
      },
    }
  })
}
```

### 服务端预获取
```typescript
// app/media/page.tsx
import { getQueryClient } from '~/lib/query/hydration'
import { HydrateClient } from '~/lib/query/hydration'

export default async function MediaPage() {
  const queryClient = getQueryClient()
  
  await queryClient.prefetchQuery(
    queryOrpc.media.list.queryOptions({ limit: 20 })
  )

  return (
    <HydrateClient client={queryClient}>
      <MediaList />
    </HydrateClient>
  )
}
```

## 项目约定

### 文件组织
```
lib/
  orpc/
    client.ts          # oRPC客户端配置
    query-client.ts    # React Query工具函数
  query/
    client.ts          # QueryClient配置
    hydration.tsx      # SSR hydration支持
components/
  business/
    media/
      media-list.tsx   # 使用查询的组件
      media-form.tsx   # 使用变更的组件
```

### 命名规范
- 查询工具实例：`queryOrpc` (驼峰命名)
- 功能模块工具：`mediaORPC`, `userORPC` (驼峰命名)
- 查询键：使用oRPC自动生成的键，避免手动创建

### 最佳实践
1. **缓存策略**：设置合理的 `staleTime` 避免不必要的重新获取
2. **错误边界**：使用React Error Boundary处理查询错误
3. **加载状态**：使用Skeleton组件提供良好的加载体验
4. **乐观更新**：在变更中使用乐观更新提升用户体验
5. **分页处理**：使用无限滚动时确保正确处理边界情况

### 性能优化
- 使用 `useMemo` 缓存查询选项
- 避免在渲染函数中创建新的查询选项对象
- 合理使用 `select` 选项转换数据
- 使用 `keepPreviousData` 保持前一页数据

## 常见模式示例

### 搜索功能
```typescript
const [search, setSearch] = useState('')

const { data } = useQuery(
  queryOrpc.media.search.queryOptions({
    input: search ? { q: search } : skipToken,
    staleTime: 5 * 60 * 1000, // 5分钟缓存
  })
)
```

### 轮询更新
```typescript
const { data } = useQuery(
  queryOrpc.media.processingStatus.queryOptions({
    input: { id: 'video-123' },
    refetchInterval: (query) => {
      return query.state.data?.status === 'processing' ? 2000 : false
    },
  })
)
```
